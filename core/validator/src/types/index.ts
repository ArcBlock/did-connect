/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface AgreementClaimType {
  chainInfo?: ChainInfoType;
  description: string;
  digest: string;
  meta?: any;
  method?: 'keccak' | 'sha3' | 'keccak_384' | 'sha3_384' | 'keccak_512' | 'sha3_512' | 'sha2';
  type: 'agreement';
  uri: string;
}

export type AnyClaimType = AuthPrincipalClaimType | ProfileClaimType | SignatureClaimType | PrepareTxClaimType | AgreementClaimType | VerifiableCredentialClaimType | AssetClaimType;

export interface AppInfoType {
  description: string;
  icon: string;
  link?: string;
  name: string;
  nodeDid?: unknown;
  path?: string;
  publisher?: string;
  subscriptionEndpoint?: string;
  updateSubEndpoint?: boolean;
}

export interface AssetClaimType {
  address?: unknown;
  chainInfo?: ChainInfoType;
  description: string;
  filters?: ({
    address?: unknown;
    tag?: string;
    trustedIssuers?: ({
      did: unknown;
      endpoint: string;
    } | unknown)[];
    trustedParents?: unknown[];
  })[];
  meta?: any;
  optional?: boolean;
  tag?: string;
  trustedIssuers?: ({
    did: unknown;
    endpoint: string;
  } | unknown)[];
  trustedParents?: unknown[];
  type: 'asset';
}

export interface AuthPrincipalClaimType {
  chainInfo?: ChainInfoType;
  declareParams?: {
    issuer: unknown;
    moniker: string;
  };
  description: string;
  meta?: any;
  supervised?: boolean;
  target?: unknown;
  targetType?: {
    hash: 'keccak' | 'sha3' | 'keccak_384' | 'sha3_384' | 'keccak_512' | 'sha3_512' | 'sha2';
    key: 'ed25519' | 'secp256k1' | 'ethereum';
    role: 'account' | 'node' | 'device' | 'application' | 'contract' | 'bot' | 'asset' | 'stake' | 'validator' | 'group' | 'tx' | 'tether' | 'swap' | 'delegation' | 'vc' | 'blocklet' | 'registry' | 'token' | 'factory' | 'rollup' | 'any';
  };
  type: 'authPrincipal';
}

export interface ChainInfoType {
  host: 'none';
  id?: string;
}

export interface ContextType {
  body?: object;
  didwallet?: object;
  headers: object;
  locale: string;
  previousConnected?: object | null;
  session?: SessionType | null;
  sessionId?: string;
  signerPk?: string;
  signerToken?: string;
}

export interface PrepareTxClaimType {
  chainInfo?: ChainInfoType;
  description: string;
  display?: string;
  meta?: any;
  partialTx: string;
  requirement: {
    assets?: {
      address?: unknown[];
      issuer?: unknown[];
      parent?: unknown[];
    };
    tokens: {
      address: unknown;
      value: unknown;
    }[];
  };
  type: 'prepareTx';
}

export interface ProfileClaimType {
  chainInfo?: ChainInfoType;
  description: string;
  items?: ('fullName' | 'email' | 'phone' | 'signature' | 'avatar' | 'birthday')[];
  meta?: any;
  type: 'profile';
}

export interface SessionType {
  appInfo?: AppInfoType;
  approveResults?: any[];
  authUrl: string;
  autoConnect?: boolean;
  challenge: string;
  currentConnected?: {
    didwallet: {
      jwt: string;
      os: string;
      version: string;
    };
    userDid: unknown;
    userPk: string;
  } | null;
  currentStep?: number;
  error?: string;
  onlyConnect?: boolean;
  previousConnected?: {
    didwallet: string;
    userDid: unknown;
    userPk: string;
  } | null;
  requestedClaims?: (AnyClaimType[] | AnyClaimType)[];
  responseClaims?: any[][];
  status: 'created' | 'walletScanned' | 'walletConnected' | 'appConnected' | 'walletApproved' | 'appApproved' | 'error' | 'timeout' | 'rejected' | 'canceled' | 'completed';
  strategy?: unknown | 'default';
  timeout?: {
    app?: number;
    relay?: number;
    wallet?: number;
  };
  updaterPk: string;
}

export interface SignatureClaimType {
  chainInfo?: ChainInfoType;
  description: string;
  digest?: string;
  display?: string;
  meta?: any;
  method?: 'none' | 'keccak' | 'sha3' | 'keccak_384' | 'sha3_384' | 'keccak_512' | 'sha3_512' | 'sha2';
  origin?: string;
  type: 'signature';
  typeUrl: 'fg:t:transaction' | 'mime:text/plain' | 'mime:text/html' | 'eth:transaction';
}

export interface VerifiableCredentialClaimType {
  chainInfo?: ChainInfoType;
  description: string;
  filters?: ({
    tag?: string;
    target?: unknown;
    trustedIssuers?: ({
      did: unknown;
      endpoint: string;
    } | unknown)[];
    type?: string[];
  })[];
  item?: string[];
  meta?: any;
  optional?: boolean;
  tag?: string;
  target?: unknown;
  trustedIssuers?: ({
    did: unknown;
    endpoint: string;
  } | unknown)[];
  type: 'verifiableCredential';
}
